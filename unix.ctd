<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="regular expression" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1585396297" ts_lastsave="1585398047">
    <rich_text>1  * :   Matches the preceding character 0 or more times.
Example a*b*       Example matches: aaaaaaaa, aaabbbbb

2. +:   Matches the preceding character 1 or more times.
Example a+b+      Example matches: aaaaaaaab, aaabbbbb, abbbbbb

3. []:  Matches any character within the brackets ( 
Example [A-Z]*   Example matches: APPLE, CAPITALS, WERTY

4. (): A grouped subexpression (these are evaluated first, in the “order of perations” of regular expressions).
Example: (a*b)*        Example matches: aaabaab, abaaab, babaaaaab

5. {m, n}:Matches the preceding character, subexpression, or bracketed character between m and n times (inclusive).
Example:  a{2,3}b{2,3}          Example matches: aabbb, aaabbb, abb

6. [^]:  Matches any single character that is not in the brackets.  
Example[^A-Z]*     Example matches: apple, lowercase, qwerty

7. | Matches any character, string of characters, or subexpression, separated by the I  
Example b(a|i|e)d       Example matches:bad, bid, bed

8.  . :Matches any single character (including symbols, numbers, a space, etc.). 
    Example b.d     Example matches: bad, bzd, b$d, b d
 
9 . ^ : Indicates that a character or subexpression occurs at the beginning of a string.
Example ^a    Example matches:  apple, asdf, a

10. \ : An escape character (this allows you to use special characters as their iteral meanings).
E xample \. \| \\          Example matches: . | \

11. $: Often used at the end of a regular expression, it means “match this up to
the end of the string.” Without it, every regular expression has a de facto
“.*” at the end of it, accepting strings where only the first part of the
string matches. This can be thought of as analogous to the ^ symbol.
Example [A-Z]*[a-z]*$  Example matches: ABCabc, zzzyx, ob egular</rich_text>
  </node>
  <node name="information" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
    <node name="file system" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="1616839081">
      <rich_text>cmd - current directory
 cd Desktop/ - move to desktop directory
 mkdir  &lt;dir name&gt;  - create  directory
1.   rmdir  &lt;dir name&gt;  - remove directory
2.   cherrytree - 
3.   man 
4.   echo “Hello” &gt; new.txt - Print ‘hello’ in the ‘new.txt’  file
5.   rm   new.txt - delete ‘new.txt’  file
6.   mv &lt;file&gt;  &lt;destinatio&gt;
7.   locate &lt;file&gt; - locate a file
8.   update
9.   chmod +x &lt;file&gt;
      chmod a +rw &lt;file&gt;
10.  cat  /etc/passwd
11. 
12.  cat  /etc/shadow - show content of shadow file
13.  su &lt;user name&gt;  -  Switch to anoter user
14.  history:  list history  of commands
            history | grep ping
14.  cat 
15.  touch &lt;file name &gt;: Create  file 
 
17.  sudo apt purge *impacket* :  uninstall
18. cd /opt 
19. sudo git  clone </rich_text>
      <rich_text link="webs https://github.com/SecureAuthCorp/impacket.git">https://github.com/SecureAuthCorp/impacket.git</rich_text>
      <rich_text>

 

 
 
 </rich_text>
    </node>
    <node name="network commands" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="1587918362">
      <rich_text>ifconfig:
iwconfig:
ping:
arp -a:
netstat -ano:     Active Internet connections (servers and established)
route:  Kernel IP   routing
python  -m SimpleHTTPServer  80:  Strat a server
ip addr : Show private ip </rich_text>
      <node name="proxychains" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
        <rich_text link="webs https://www.youtube.com/watch?v=jqrd9Ba3VOc&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=9">https://www.youtube.com/watch?v=jqrd9Ba3VOc&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=9</rich_text>
        <rich_text>

1. nano /etc/proxychains.conf
2. comment  random_chain   and  strict_chain
3. uncomment  dynamic_chain
4.   run: service tor status
      result :  * tor is running
5.  service tor start
6.  run: proxychains &lt;application name&gt; &lt;parmeters&gt;
    Examples  proxychains  firefox </rich_text>
        <rich_text link="webs http://www.duckduckgo.com">www.duckduckgo.com</rich_text>
        <rich_text>  (can't run firefox as root)
                   proxychains nmap &lt;ip&gt;
7.  In order to test DNS leaks  in the serach window print  “test DNS leaks”
      chose “</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">DNS</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> </rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">leak</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> test</rich_text>
        <rich_text>”
    result     Hello 51.68.201.115  from , 
8.  To retest: close firefox and run service tor restart   
                    and run : proxychains  firefox </rich_text>
        <rich_text link="webs http://www.duckduckgo.">www.duckduckgo</rich_text>
        <rich_text>
                   chose “</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">DNS</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> </rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">leak</rich_text>
        <rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> test</rich_text>
        <rich_text>”
                   and the ip is diffrent
 In Kali  case  TOR is not fount: “e: Unable to locate Package” Error in kali linux
 1  nano   /etc/apt/sources.list   
 2. Go to the website below:
       </rich_text>
        <rich_text link="webs https://www.kali.org/docs/general-use/kali-linux-sources-list-repositories/">https://www.kali.org/docs/general-use/kali-linux-sources-list-repositories/</rich_text>
        <rich_text>
 3. get the repositories and add in source.list file and save    
 4. content of  /etc/apt/sources.list :
        deb http://http.kali.org/kali kali-rolling main non-free contrib
       deb-src http://http.kali.org/kali kali-rolling main non-free contrib
 5.  run sudo apt-get   install tor
                  
</rich_text>
      </node>
      <node name="Net commands" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="1586972296">
        <rich_text>

</rich_text>
        <rich_text underline="single" weight="heavy">nmap</rich_text>
        <rich_text>: discover hosts and services on a computer network by sending packets and analyzing the responsesls
 nmap -v -A scanme.nmap.org
 nmap -T4 -A -v &lt;ip&gt;:  Intense  scan
 nmap -oG - 10.0.2.0-255 -vv &gt;  res  :scan and output  results  to  a file named res
 nmap -oG - 10.0.2.0-255 -p 22 -vv &gt;  res :   scan for  port  22  and output  results  to  a file named res
 nmap -A  &lt;addr&gt;     # find os
 nmap -sV &lt;addr&gt;    #Find services
 nmap -F  www.google.com &gt; scan.txt    #Most commanly  targeted ports
 
</rich_text>
        <rich_text underline="single" weight="heavy">netdiscover</rich_text>
        <rich_text>:  find internal/local IP addresses
 netdiscover:  -i eth0: Find devices connect to ‘eth0’
 netdiscover:  -i eth0 -r 192.168.1.1/24: Find devices connect to ‘eth0’ subnet

lscript:  
   To start   run  /bin/lscript/l




</rich_text>
        <rich_text underline="single" weight="heavy">zenmap</rich_text>
        <rich_text>:    Grapical  interface  for  nmap

</rich_text>
      </node>
      <node name="Macchanger" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
        <rich_text>macchanger   --help
macchanger -s  etho  // Show current mac
macchanger -a  etho // Change mac address to a random address
macchanger -p  etho // Reset to the  original mac  address</rich_text>
      </node>
      <node name="Armitage metsploit" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1586766325" ts_lastsave="1587573503">
        <rich_text>Metasploit  modules;
   (1) exploits    (2) payloads  (3) auxiliary  (4) nops 
   (5) post       (6) encoders   (7) evasion  

options (variables).
  RHOST - this is the remote host or target IP
  LHOST - this is the local host or attacker IP
  RPORT - this is the remote port or target port
  LPORT - this is the local port or attacker port
     
metasploit-framework package and is installed in the /usr/share/metasploit-framework 
use auxiliary/scanner/portscan/tcp
show  options

set RHOSTS  192.168.1.100
set PORTS 1-1000
run


Getting Started

kali &gt; service postgresql start
kali &gt;msfconsole


msf &gt; use exploit/windows/browser/adobe_flash_avm2 :Loads a module
msf &gt; show payloads: list all the payloads that are compatible with this exploit
msf &gt; show options: options that need to set before running the module
msf &gt; show targets  

msf &gt; info: info of  exploit

msf &gt; search
msf &gt; search type:exploit platform:windows flash:  exploit (type) for Windows (platform) for Abobe Flash
msf &gt; set SRVPORT 80: default SVRPORT (server port) from 8080 to 80
msf &gt; unset SRVPORT: unsets the option

msf &gt; exploit: sends the exploit to the target system and, if successful, installs the payload

msf &gt; back: take us "back" one step in our process
msf &gt; exit

Metasploit  modules;
   (1) exploits
   (2) payloads
   (3) auxiliary
   (4) nops 
   (5) post
   (6) encoders
   (7) evasion (new in Metasploit 5)

options (variables).


  RHOST - this is the remote host or target IP
  LHOST - this is the local host or attacker IP
  RPORT - this is the remote port or target port
  LPORT - this is the local port or attacker port
     
metasploit-framework package and is installed in the /usr/share/metasploit-framework 
use auxiliary/scanner/portscan/tcp
show  options

set RHOSTS  192.168.1.100
set PORTS 1-1000
run


Getting Started

kali &gt; service postgresql start
kali &gt;msfconsole


msf &gt; use exploit/windows/browser/adobe_flash_avm2 :Loads a module
msf &gt; show payloads: list all the payloads that are compatible with this exploit
msf &gt; show options: options that need to set before running the module
msf &gt; show targets  

msf &gt; info: info of  exploit

msf &gt; search
msf &gt; search type:exploit platform:windows flash:  exploit (type) for Windows (platform) for Abobe Flash
msf &gt; set SRVPORT 80: default SVRPORT (server port) from 8080 to 80
msf &gt; unset SRVPORT: unsets the option

msf &gt; exploit: sends the exploit to the target system and, if successful, installs the payload

msf &gt; back: take us "back" one step in our process
msf &gt; exit

</rich_text>
        <rich_text link="webs https://www.hackers-arise.com/post/2017/01/30/metasploit-part-2-metasploit-module-types">https://www.hackers-arise.com/post/2017/01/30/metasploit-part-2-metasploit-module-types</rich_text>
        <rich_text>
</rich_text>
      </node>
    </node>
    <node name="wifi" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
      <node name="airmon" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
        <rich_text link="webs https://www.youtube.com/watch?v=uFRKwWxMa8Y">https://www.youtube.com/watch?v=uFRKwWxMa8Y</rich_text>
        <rich_text>
www.aircrack-ng.org

1. airmon-ng:


Interface	Chipset		Driver

wlp4s0		Intel AC	iwlwifi - [phy0]



2. ifconfig:
 
enp2s0    Link encap:Ethernet  HWaddr 2c:fd:a1:b1:00:92  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:1325 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1325 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:127479 (127.4 KB)  TX bytes:127479 (127.4 KB)

wlp4s0    Link encap:Ethernet  HWaddr e4:70:b8:d3:12:56  
          inet addr:192.168.43.30  Bcast:192.168.43.255  Mask:255.255.255.0
          inet6 addr: fe80::ec82:87c5:1d45:41be/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:51251 errors:0 dropped:0 overruns:0 frame:0
          TX packets:27462 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:62110954 (62.1 MB)  TX bytes:3114896 (3.1 MB)


3. iwconfig
4. airmon-ng check  #List of  processes that could cause trouble
5. airmon-ng check kill  #Kill  processes that could cause trouble
6.   airmon-ng start   wlp4s0 
  
  Interface	Chipset		Driver

wlp4s0		Intel AC	iwlwifi - [phy0]
				(monitor mode enabled on mon0)

7. ifconfig:

 mon0      Link encap:UNSPEC  HWaddr E4-70-B8-D3-12-56-3A-30-00-00-00-00-00-00-00-00  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

8. airodump-ng  mon0

</rich_text>
      </node>
    </node>
    <node name="Bandit" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
      <rich_text>OverTheWire: </rich_text>
      <rich_text link="webs https://overthewire.org">https://overthewire.org</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="start monitor" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
      <rich_text>
#wifite  -showb  #show all spots
# airmon-ng &lt;start|stop|check&gt; &lt;interface&gt; [channel or frequency]
iwconfig
airmon-ng check  #List of  processes that could cause trouble
airmon-ng check kill  #Kill  processes that could cause trouble
airmon-ng start  wlan0 # Start monitoring  wlan0
iwconfig
airodump-ng  wlan0mon #  (or  mon0) list  access points

besside-ng  wlan0mon 

besside-ng  wlan0mon --bssid  &lt;mac&gt; -c &lt;channl num&gt;# listen to this  mac and this channl      n</rich_text>
    </node>
    <node name="Stop monitor mode" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="0">
      <rich_text> 
  
 airmon-ng stop wlan1mon    
 service networking restart
 service network-manager restart
 ifconfig </rich_text>
    </node>
  </node>
  <node name="Commands" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="0" ts_lastsave="1618245087">
    <rich_text>
# </rich_text>
    <rich_text link="webs https://www.youtube.com/channel/UCv7IDZW4vAf3sPKtTm6cQCg/playlists">https://www.youtube.com/channel/UCv7IDZW4vAf3sPKtTm6cQCg/playlists</rich_text>
    <rich_text>




</rich_text>
    <rich_text underline="single" weight="heavy">base64</rich_text>
    <rich_text>
base64 -d &lt;file name&gt; : decodes base64 encoded file  

</rich_text>
    <rich_text underline="single" weight="heavy">bzip2</rich_text>
    <rich_text>: compressed data 
 bzip2 -d data: Decompress   file
 
</rich_text>
    <rich_text underline="single" weight="heavy">cat</rich_text>
    <rich_text>
 cat ./- : out a file called ‘- ’
 cat "spaces in this filename":  output a file called “spaces in this filename” 
 cat .inhere :output  a hidden file name “nihere”
 cat /etc/bandit_pass/bandit14:  Output   passward 
 
</rich_text>
    <rich_text underline="single" weight="heavy">chmod</rich_text>
    <rich_text>
chmod a +rw &lt;file&gt;

</rich_text>
    <rich_text underline="single" weight="heavy">cp</rich_text>
    <rich_text>
 cp data.txt /tmp/yourname
 
</rich_text>
    <rich_text underline="single" weight="heavy">curl</rich_text>
    <rich_text>:  transferring data using various network protocols.  
 curl -O  &lt;url&gt;: Download file  
 

</rich_text>
    <rich_text underline="single" weight="heavy">df</rich_text>
    <rich_text>  (disk free ) reports on the available disk . Its -h option  converts unit (usually mebibytes or gibibytes) 
 
 
</rich_text>
    <rich_text underline="single" weight="heavy">diff </rich_text>
    <rich_text>
diff &lt;file 1&gt; &lt;file 2&gt;:   compare files line by line

</rich_text>
    <rich_text underline="single" weight="heavy">file</rich_text>
    <rich_text>  
 file ./*  : Show type of all  files in this directory

</rich_text>
    <rich_text underline="single" weight="heavy">find</rich_text>
    <rich_text>
 find -name "filename": Find file by its file name
 find / -user bandit20:   find all  file  owned  by user = bandit20
 find ./ -size 1033c ! -executable:    find a file somewhere under the inhere directory and has  all  of the   following  properties:  
     human-readable   • 1033 bytes in size  • not executable
find / -type f -user bandit7 -group bandit6 -size 33 :   find a file tored somewhere on the server and has all of the following properties:
    owned by user bandit7   owned by group bandit6  33 bytes in size
  
</rich_text>
    <rich_text underline="single" weight="heavy">grep</rich_text>
    <rich_text>
 grep "millionth"  data.txt:  find the line in file data.txt next to the word millionth

</rich_text>
    <rich_text underline="single" weight="heavy">gzip</rich_text>
    <rich_text> 
 gzip -d data.gz: Decompress file
 
</rich_text>
    <rich_text underline="single" weight="heavy">id </rich_text>
    <rich_text>   displays the identity of the user running the session along with the list of groups
they belong to

info
</rich_text>
    <rich_text underline="single" weight="heavy">ip</rich_text>
    <rich_text>
ip addr: Show private  ip 

</rich_text>
    <rich_text underline="single" weight="heavy">ls </rich_text>
    <rich_text>  -la lists files
</rich_text>
    <rich_text underline="single" weight="heavy">lspci</rich_text>
    <rich_text>   lists PCI devices, 
</rich_text>
    <rich_text underline="single" weight="heavy">lsusb</rich_text>
    <rich_text>   lists USB devices 
</rich_text>
    <rich_text underline="single" weight="heavy">lspcmcia</rich_text>
    <rich_text>   ists PCMCIA cards



</rich_text>
    <rich_text underline="single" weight="heavy">mkdir</rich_text>
    <rich_text>
mkdir /tmp/yourname  

</rich_text>
    <rich_text underline="single" weight="heavy">nc</rich_text>
    <rich_text> (netcat) :Utility for reading/writing to network connections using </rich_text>
    <rich_text link="webs https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</rich_text>
    <rich_text> or </rich_text>
    <rich_text link="webs https://en.wikipedia.org/wiki/User_Datagram_Protocol">UDP</rich_text>
    <rich_text>
    cat /etc/bandit_pass/bandit14 | nc localhost 30000:  Ooen port 3000  with passward in file ‘bandit14’
    

</rich_text>
    <rich_text underline="single" weight="heavy">nmap</rich_text>
    <rich_text>: Ports  scanners
nmap -sT localhost -p31000-32000:  scan localhost and ports from 31000 to 32000    

</rich_text>
    <rich_text underline="single" weight="heavy">openssl:</rich_text>
    <rich_text> Cryptography secure Sockets Layer network connections 
 echo &lt;password&gt;| openssl s_client -quiet -connect &lt;host&gt;:&lt;port num&gt;: Open port with password


</rich_text>
    <rich_text underline="single" weight="heavy">pwd</rich_text>
    <rich_text>: Parrent Working  Directory

</rich_text>
    <rich_text underline="single" weight="heavy">rm</rich_text>
    <rich_text> &lt;file&gt;: Remove a file 

</rich_text>
    <rich_text underline="single" weight="heavy">sort</rich_text>
    <rich_text> :
sort data.txt | uniq -c  : line of text that occurs only once 

</rich_text>
    <rich_text underline="single" weight="heavy">ssh</rich_text>
    <rich_text> (</rich_text>
    <rich_text link="webs https://www.ssh.com/ssh/protocol">Secure Shell</rich_text>
    <rich_text>):  secure remote login from one computer to another. 
 (sshd  process is started when the system boots  ) 
 ssh kali@127.0.0.1
 ssh  bandit0@bandit.labs.overthewire.org  -p 2220
 ssh -i sshkey.private bandit14@localhost :  Selects a file from which the identity (private key) for public key  read. 
 ssh -p 2220 bandit18@bandit.labs.overthewire.org ls: login and run ‘ls’ command
 ssh -p 2220 bandit18@bandit.labs.overthewire.org cat &lt;file&gt;: login and run ‘cat’ command
   


</rich_text>
    <rich_text underline="single" weight="heavy">strings:</rich_text>
    <rich_text>  print the strings of printable characters in files.
 strings data.txt | grep '^=' : Find strings beginning with several ‘=’ characters.

</rich_text>
    <rich_text underline="single" weight="heavy">systemctl </rich_text>
    <rich_text>:  check status of services
 systemctl start &lt;process  name&gt;  : Start a process
 systemctl status  &lt;process  name&gt;

</rich_text>
    <rich_text underline="single" weight="heavy">tar</rich_text>
    <rich_text> 
 tar -xf data5.bin :Decompress  file   
 
</rich_text>
    <rich_text underline="single" weight="heavy">telnet</rich_text>
    <rich_text>
 telnet localhost 30000
 
</rich_text>
    <rich_text underline="single" weight="heavy">touch</rich_text>
    <rich_text> 
 touch &lt;file1&gt; &lt;file2&gt;  &lt;file3&gt; ... :  create  one or more files
 touch -a  &lt;file&gt;: Update the last access and modification times of a file.

</rich_text>
    <rich_text underline="single" weight="heavy">tr</rich_text>
    <rich_text>
 cat greekfile | tr “[a-z]” “[A-Z]”: Translate lower to capital  letter
 cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m' :translate A to N B to M C to O ....
 echo "Welcome To GeeksforGeeks" | tr [:space:] '\t': translate all the white-space to tabs
 $ tr '{}' '()' &lt; inputfile &gt; outputfile:  translate if it is a brace, and write the  

 
 
</rich_text>
    <rich_text underline="single" weight="heavy">uname </rich_text>
    <rich_text>-a  single line documenting the kernel name ( Linux ), the hostname, kernel release,  version, the machine type (an architecture string such as x86_64 ), name of the operating system ( GNU/Linux ). 
 
</rich_text>
    <rich_text underline="single" weight="heavy">wget</rich_text>
    <rich_text>
 wget  -mk &lt;url&gt;: Clone a website to  local machine 

 
</rich_text>
    <rich_text underline="single" weight="heavy">xxd</rich_text>
    <rich_text>: creates a hex dump of a  file 
 xxd test.txt: Output hexdump to the console
 xxd -r data.txt data.out: Reverse from hex dump  to  original 

</rich_text>
    <rich_text underline="single" weight="heavy">vim</rich_text>
    <rich_text>: editor

 
 </rich_text>
  </node>
  <node name="cmd" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1584431613" ts_lastsave="1616839385">
    <rich_text underline="single" weight="heavy">arp -av</rich_text>
    <rich_text> :Displays and modifies the IP-to-Physical address translation tables used by
address resolution protocol(arp).
ipconfig /all: chack your  ip
ip addr: Show prvate  ip
netsh wlan show profile: List all wifi  conected
tracert  </rich_text>
    <rich_text link="webs http://www.bbc.com">www.bbc.com</rich_text>
    <rich_text>:Tracing route to bbc
nslookup
nbtstat
routh



</rich_text>
    <rich_text underline="single" weight="heavy">systeminfo</rich_text>
    <rich_text>: Show info of the  system
</rich_text>
    <rich_text underline="single" weight="heavy">tree</rich_text>
    <rich_text>: graphical representation of all  files
</rich_text>
    <rich_text underline="single" weight="heavy">netsh wlan export  profile folder=c:\  key=clear</rich_text>
    <rich_text> : All paswords are in folder c:
 
</rich_text>
    <rich_text underline="single" weight="heavy">color</rich_text>
    <rich_text> Sets the default console foreground and background colors.
color  1e: background black font=yellow

</rich_text>
    <rich_text underline="single" weight="heavy">wmic product get name</rich_text>
    <rich_text>: List all  programs  installed
</rich_text>
  </node>
  <node name="hashcat" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1590569730" ts_lastsave="1591790777">
    <rich_text>
</rich_text>
    <rich_text scale="h3">Create a file dictionary with MBD5 hashes</rich_text>
    <rich_text>

echo -n “Password” | md5sum | tr -d ' -' &gt;&gt; target_hashes.txt

 echo -n “HELLO” | md5sum | tr -d  ' -' &gt;&gt; target_hashes.txt
 echo -n “MYSECRET” | md5sum | tr -d ' -' &gt;&gt; target_hashes.txt
 echo -n “Test1234″ | md5sum | tr -d ' -' &gt;&gt; target_hashes.txt
 echo -n “P455w0rd” | md5sum | tr -d ' -' &gt;&gt; target_hashes.txt



The -n option removes  the new line added to the end of “Password.” This is because  we  don’t want the new line characters to be hashed  
 “tr –d ‘ -‘ “ removes any characters that are a space or hyphen from the output.</rich_text>
    <rich_text foreground="#404040">
 </rich_text>
    <rich_text>
locate wordlists: Find location of the wordlist </rich_text>
    <rich_text scale="small">file</rich_text>
    <rich_text>
locate rockyou.txt
        /usr/share/wordlists/rockyou.txt.gz
ls  /usr/share/wordlists
output: dirb  dirbuster  fasttrack.txt  fern-wifi  metasploit  nmap.lst  rockyou.txt  wfuzz





</rich_text>
    <rich_text scale="h3">Start Hashcat </rich_text>
    <rich_text>
 
  hashcat -h
 options  
    -m :  hashtype (md5sum,)
     -a: attack mode
     
     
 </rich_text>
    <rich_text scale="h3">Cracking the hashes:
 </rich_text>
    <rich_text>$ hashcat -a “attack type” -m “hash type” -r “rules” -o “output file” hashes.txt wordlist.txt 
 Masks: 
 ?d = digit 
 ?l = lowercase letter 
 ?u = uppercase letter 
 ?s = symbol (inc space) 
 ?a = all of the above
 
 
 
 
 
 
 
In the final step, we can now start cracking the hashes contained in the target_hashes.txt file. We will use the following command line, as illustrated below:
 hashcat -m 0 -a 0 -o cracked.txt target_hashes.txt /usr/share/wordlists/rockyou.txt  </rich_text>
    <rich_text family="monospace">-O</rich_text>
    <rich_text>
 
 The  -O  at the end of  the command line will increase the cracking speed, but will  limit the password length to  27
 
     
 


• -m 0 designates the type of hash we are cracking (MD5);
• -a 0 designates a dictionary attack;
• -o cracked.txt is the output file for the cracked passwords;
• target_hashes.txt is our input file of hashes;
• /usr/share/wordlists/rockyou.txt
 is the absolute path to the wordlist file for this dictionary attack.
  
     
</rich_text>
  </node>
</cherrytree>
