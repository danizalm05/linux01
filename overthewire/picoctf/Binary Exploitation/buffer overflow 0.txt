
                      buffer overflow 0
                     =====================

problem URL: 
https://play.picoctf.org/practice?originalEvent=70&page=1&search=buffer%20overflow%200

https://www.youtube.com/watch?v=x19LMDmvh6U&list=PL1H1sBF1VAKUbRWMCzEBi61Z_7um7V5Sd&index=4
 
Description:
 Let's start off simple, can you overflow the correct buffer? The program is available here:
    https://artifacts.picoctf.net/c/174/vuln

 You can view source here:
   https://artifacts.picoctf.net/c/174/vuln.c

Additional details will be available after launching your challenge instance. 
  Connect using: nc saturn.picoctf.net 52404
  
  
 Hints:
   
  1.How can you trigger the flag to print?
  2.If you try to do the math by hand, maybe try and add a few more characters. Sometimes there are things you aren't expecting.
  3.Run man gets and read the BUGS section. How many characters can the program really read?  
  
      ----------------------------   vuln.c    -------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

#define FLAGSIZE_MAX 64

char flag[FLAGSIZE_MAX];

void sigsegv_handler(int sig) {
  printf("%s\n", flag);
  fflush(stdout);
  exit(1);
}

void vuln(char *input){
  char buf2[16];
  strcpy(buf2, input);
}

int main(int argc, char **argv){
  
  FILE *f = fopen("flag.txt","r");
  if (f == NULL) {
    printf("%s %s", "Please create 'flag.txt' in this directory with your",
                    "own debugging flag.\n");
    exit(0);
  }
  
  fgets(flag,FLAGSIZE_MAX,f);
  signal(SIGSEGV, sigsegv_handler); // Set up signal handler
  
  gid_t gid = getegid();
  setresgid(gid, gid, gid);


  printf("Input: ");
  fflush(stdout);
  char buf1[100];
  gets(buf1); 
  vuln(buf1);
  printf("The program will exit now\n");
  return 0;
}

 
 ======================================
  
Solutions :
The sigsegv_handler() program is what we are going to need to trigger to return the flag. 

There is a  strcpy(buf2, input); , these functions are inherently vulnerable and I decided to see if there was something we could exploit there. 
In this challenge the strcpy() is taking the input that is given by the user and copying it into the buf2 string. 

 Buf2 is defined as a char with a size of 16. We could overrun this buffer by putting any input that was longer than 16 characters in the input field when running the program.
 
 The input being too large for the buffer caused it to overflow, triggering the sigsegv_handler() function, which prints out the flag. We have successfully overran the buffer and just have to submit the flag for points in the picoCTF gym.
 
 
 Never use fgets
Flag:
picoCTF{ov3rfl0ws_ar3nt_that_bad_c5ca6248}
