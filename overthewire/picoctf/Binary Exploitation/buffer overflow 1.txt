
                              buffer overflow 1
                          =====================
 
problem URL: 
https://play.picoctf.org/practice/challenge/258
https://www.youtube.com/watch?v=k4hqdVo3cqk&list=PL1H1sBF1VAKUbRWMCzEBi61Z_7um7V5Sd&index=31

https://github.com/Cajac/picoCTF-Writeups/blob/main/picoCTF_2022/Binary_Exploitation/buffer_overflow_1.md
Description: 

Description
Control the return address Now we're cooking! You can overflow the buffer and return to the flag function in the program:
       https://artifacts.picoctf.net/c/187/vuln
 You can view source here:
       https://artifacts.picoctf.net/c/187/vuln.c

 And connect with it using nc saturn.picoctf.net 61798
 
Hints:
1. Make sure you consider big Endian vs small Endian.
2. Changing the address of the return pointer can call different functions.
 
  ----------------------------   vuln.c    -------------------------------------
  
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include "asm.h"

#define BUFSIZE 32
#define FLAGSIZE 64

void win() {
  char buf[FLAGSIZE];
  FILE *f = fopen("flag.txt","r");
  if (f == NULL) {
    printf("%s %s", "Please create 'flag.txt' in this directory with your",
                    "own debugging flag.\n");
    exit(0);
  }

  fgets(buf,FLAGSIZE,f);
  printf(buf);
}

void vuln(){
  char buf[BUFSIZE];
  gets(buf);

  printf("Okay, time to return... Fingers Crossed... Jumping to 0x%x\n", get_return_address());
}

int main(int argc, char **argv){

  setvbuf(stdout, NULL, _IONBF, 0);
  
  gid_t gid = getegid();
  setresgid(gid, gid, gid);

  puts("Please enter your string: ");
  vuln();
  return 0;
}


  
  
  ===============================
	ppicoCTF{}
   
 
  
 
 
	
	  


