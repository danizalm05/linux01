
                              buffer overflow 1
                          =====================
 
problem URL: 
https://play.picoctf.org/practice/challenge/258
https://www.youtube.com/watch?v=k4hqdVo3cqk&list=PL1H1sBF1VAKUbRWMCzEBi61Z_7um7V5Sd&index=31


https://colej.net/picoctf-2022-buffer-overflow-1
https://github.com/Cajac/picoCTF-Writeups/blob/main/picoCTF_2022/Binary_Exploitation/buffer_overflow_1.md

Description
Control the return address
Now we're cooking! You can overflow the buffer and return to the flag function in the program:
       https://artifacts.picoctf.net/c/187/vuln
 You can view source here:
       https://artifacts.picoctf.net/c/187/vuln.c

 And connect with it using:
        nc saturn.picoctf.net 61798
 
Hints:
1. Make sure you consider big Endian vs small Endian.
2. Changing the address of the return pointer can call different functions.
 
  ----------------------------   vuln.c    -------------------------------------
  
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include "asm.h"

#define BUFSIZE 32
#define FLAGSIZE 64

void win() {
  char buf[FLAGSIZE];
  FILE *f = fopen("flag.txt","r");
  if (f == NULL) {
    printf("%s %s", "Please create 'flag.txt' in this directory with your",
                    "own debugging flag.\n");
    exit(0);
  }

  fgets(buf,FLAGSIZE,f);
  printf(buf);
}

void vuln(){
  char buf[BUFSIZE];
  gets(buf);

  printf("Okay, time to return... Fingers Crossed... Jumping to 0x%x\n",   get_return_address());
}

int main(int argc, char **argv){

  setvbuf(stdout, NULL, _IONBF, 0);
  
  gid_t gid = getegid();
  setresgid(gid, gid, gid);

  puts("Please enter your string: ");
  vuln();
  return 0;
}



notes:
1. the fuction  'get_return_address()' is not part of this source code .  It is part of  the #include "asm.h".

2. The win() function returns the flag, but it is nevered called.

3. If we look in the vuln() function we can see it uses the gets() function. If we can overwrite the return address with the win() 's function return address, we can make it execute the win()'s function and get the flag.

4. We have a main function that calls a vuln function that is vulnerable to a buffer overflow due to the unbounded gets call. If we input more than BUFSIZE, that is 32 characters/bytes, we can overwrite the return address on the stack to call the win function instead of returning to main.



https://en.wikipedia.org/wiki/Call_stack

Solution:
1.  
 
 14:00 
  ===============================
	ppicoCTF{}
   
 
  
 
 
	
	  


