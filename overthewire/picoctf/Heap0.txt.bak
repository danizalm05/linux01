heap0
https://play.picoctf.org/practice/challenge/438

https://medium.com/@erichdryn/heap-0-picoctf-writeup-a1a20406608b
 
from picoctf run WebShall and from there run ' nc tethys.picoctf.net 54516 '
copy the id from the decription

Description:

 The program 'chall.c' that runs at the moment of contact and it  allocates two 
 variables, on the heap:
 
    1. input_data  =  "pico"
    2. safe_var = "bico"
 
 if you modify the content of 'safe_var', the flag stored in a file wiil be printed.
 
       if (strcmp(safe_var, "bico") != 0) {
                 printf("\nYOU WIN\n");
       }

answer: 
 
To modify the content of safe_var, I focused on the write_buffer() function, 
which allows us to write input directly to input_data
  
     void write_buffer() {
			printf("Data for buffer: ");
			fflush(stdout);
			scanf("%s", input_data);
	 }

The scanf function here is the key of the exploit. Since scanf lacks boundary checks,
 it can overflow the input_data buffer, 
allowing us to overwrite adjacent memory locations, including the safe_var.

To determine the exact string length required to overwrite safe_var, I analyzed the
 memory layout using the program’s  “print heap” function, which revealed the
 heap addresses of input_data and safe_var.

0x5e4efee792b0  ->   pico
+-------------+----------------+
0x5e4efee792d0  ->   bico

 the difference between addresses is:
  0x63c3882552d0 - 0x63c3882552b0  =   0x20 
  
To successfully overwrite 'safe_var', the string needs to be sufficiently long, 
at least 33 bytes.
in safe_var with something else, causing the check_win() function to print the flag.

so in the menu chose the write option and write  this string and flag will be output

and chose 4 from the menu. The flag will  be printed
picoCTF{my_first_heap_overflow_0c473fe8}





 