
                            Operation Orchid
                          =====================
 
problem URL: 
https://play.picoctf.org/practice/challenge/285
 

https://medium.com/@atigamli/picoctf-1-writeup-operation-orchid-af876fd2b392

Description:  
 Download this disk image and find the flag:
                         https://artifacts.picoctf.net/c/212/disk.flag.img.gz
    
 Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
 
soulution :
 
    1. wget https://artifacts.picoctf.net/c/212/disk.flag.img.gz
    2. file disk.flag.img.gz
	    disk.flag.img.gz: gzip compressed data, was "disk.flag.img", 
		last modified: Thu Mar 16 01:56:49 2023, from Unix, 
		original size modulo 2^32 419430400
    3.	gunzip disk.flag.img.gz  
 	4.	mmls disk.flag.img   # list the partition table contents 
	
	            DOS Partition Table
				Offset Sector: 0
				Units are in 512-byte sectors

				 	   Slot      Start        End          Length       Description
				000:  Meta      0000000000   0000000000   0000000001   Primary Table (#0)
				001:  -------   0000000000   0000002047   0000002048   Unallocated
				002:  000:000   0000002048   0000206847   0000204800   Linux (0x83)
				003:  000:001   0000206848   0000411647   0000204800   Linux Swap / Solaris x86 (0x82)
				004:  000:002   0000411648   0000819199   0000407552   Linux (0x83
       
     
	 5.  Lets find out what’s in the third partition (index 002).
	      fls -o 2048 disk.flag.img
     output: This looks like OS mumbo-jumbo that I don’t understand, so I’ll just check out the other partition which starts at 411648.
	 
	 6. There’s two Linux (0x83) partitions. My guess is that it’s in the fifth partition (index 004) since it has the largest length,  
         
       fls -o 411648 disk.flag.img
     7. node number 472 has the folder root , which looks like a promising start. 
	 Hence, seek what’s inside there using the fls command once more, but now, we’re using the inode number as well, so the command looks like
      	 fls -o 411648 disk.flag.img  472  
     output: 
         r/r 1875:	.ash_history
         r/r * 1876(realloc):	flag.txt
         r/r 1782:	flag.txt.enc
	 
		 we’ve found flag.txt.enc on inode 1782! 
		 On inode 1876, there’s also a flag.txt, but since it has an asterisk, it’s already deleted. 
		 Now, since the .enc extension file means that the file is encrypted, we must find a way to decrypt it as well. But first, we have to know what the encryption method that is used and what the key is to decrypt it. 
       8. Let’s see what the flag.txt.enc file looks like inside using the icat command, to extract the data inside.
	   
           icat -o 411648 disk.flag.img  1782 
        output:
       		Salted__........
       9. So we need to find the key, we will find it using 
	         strings -t d disk.flag.img | grep flag.txt
			 
		  output:
		     one of the lines is:
			  219964506 openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567
       10.  We find that an OpenSSL AES-256 encryption was used,
	   with salt options,  with the key unbreakablepassword1234567 . 
	   All that’s left is to decrypt it. 
	  11. extract what’s inside using the icat method 
	  	      icat -o 411648 disk.flag.img  1782 > flag.txt.enc
	  11. file flag.txt.enc
              flag.txt.enc: openssl enc'd data with salted password	 
	  12.	
	    decrypt  extracted file. 
	  openssl aes256 -d -salt -in flag.txt.enc -out flag.txt -k    unbreakablepassword1234567

     output:
		*** WARNING : deprecated key derivation used.
		Using -iter or -pbkdf2 would be better.
		bad decrypt
		4047AC47867F0000:error:1C800064:Provider routines:ossl_cipher_unpadblock:bad decrypt:../providers/implementations/ciphers/ciphercommon_block.c:124:
	  
      13 cat flag.txt
         picoCTF{h4un71ng_p457_0a710765}




 
          
   
 
  
 
 
	
	  


