 
Bandit Level 14

------------------------
https://overthewire.org/wargames/bandit/bandit15.html
ssh bandit14@bandit.labs.overthewire.org -p 2220

pass: fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq

problem:password for the next level can be retrieved by submitting 
the password of the current level to port 30000 on localhost.


solution:
1.
echo fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq | nc localhost 30000
nc is similar to cat command but for network(TCP, UDP.).

pass = jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt
 
 

Bandit Level 15      
https://www.youtube.com/watch?v=yKXDB2bg-wc&list=PL1H1sBF1VAKUsYdQd94dO9MgSaY2p1AJ4&index=5
https://overthewire.org/wargames/bandit/bandit16.html
ssh bandit15@bandit.labs.overthewire.org -p 2220
pass jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt

problem: Password can be retrieved by submitting password of the
current level to port 30001 on localhost using SSL encryption


solution: 1. 
 echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -quiet -connect localhost:30001

Anoter solution: 
 cat /etc/bandit_pass/bandit15 | openssl s_client -quiet -connect localhost:30001

output :
depth=0 CN = localhost
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = localhost
verify return:1
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

pass = cluFn7wTiGryunymYOu4RcffSxQluehd
JQttfApK4SeyHwDlI9SXGR50qclOAil1

Bandit Level 16     
 
https://overthewire.org/wargames/bandit/bandit17.html
ssh bandit16@bandit.labs.overthewire.org -p 2220
pass = JQttfApK4SeyHwDlI9SXGR50qclOAil1

medium.com/@theGirlWhoEncrypts/overthewire-bandit-level-16-level-17-958bd0bfcbc4

problem: The credentials for the next level can be retrieved by
submitting the password of the current level to a port on
localhost in the range 31000 to 32000.
a: find out which of these ports have a server listening.
b: find out which of those speak SSL .
There is only 1 server that will give the next credentials,
the others will simply send back to you whatever you send to it.

Write up
1. nmap -p 31000-32000 localhost
output: 5 open ports with services unknown:
...
PORT STATE SERVICE
31046/tcp open unknown
31518/tcp open unknown
31691/tcp open unknown
31790/tcp open unknown
31960/tcp open unknown
...
2. Send bandit16’s password to all 5 ports, using openssl
with s_client tool, was in our previous challenge.
cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31046 -quiet
cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31518 -quiet
cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31691 -quiet
cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31960 -quiet
cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31790 -quiet

output:
Finally, at port 31790, the output we received is a
RSA private key.
3. Save the RSA private key into a file.
we don’t have write permission in the home or current
working directory.
a. create a folder named /tmp/name123 & navigate
mkdir /tmp/itom1738
cd /tmp/itom1738
  The next comman will save the RSA  of port  31790  in 
the file 'cd /tmp/itom1738'

cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31790 -quiet > /tmp/itom1738/b16pkey

4. cat /tmp/itom1738/b16pkey    ## view the key
5. chmod 600 /tmp/itom1738/b16pkey      # Change permisson
6.  ssh bandit17@localhost -i /tmp/itom1738/b16pkey -p 2220     #Connect to bandit17 using the RSA in : '/tmp/itom1738/b16pkey'


Now we are connected to server as bandit16
7. cat /etc/bandit_pass/bandit17: obtain bandit17‘s password,

Password :   VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e


Bandit Level 17     

https://overthewire.org/wargames/bandit/bandit17.html
ssh bandit17@bandit.labs.overthewire.org -p 2220
pass: VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e

problem: Password is in passwords.new and is the only line that
has been changed between passwords.old and passwords.new

Write up: 1. diff passwords.new passwords.old
output: 

42c42
< hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg
---
> p6ggwdNHncnmCNxuAt0KtKVq185ZU7AW


- Lines preceded by a < are lines from the 1st file.
- Lines preceded by a > are lines from the 2nd file.
- The 3 dashes --- separating the lines of 1st 2nd file ones.

Password : hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg

Bandit Level 18     
 
https://overthewire.org/wargames/bandit/bandit18.html
ssh bandit18@bandit.labs.overthewire.org -p 2220
pass:   hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg
 
problem: The password for the next level is stored in a file
readme in the home directory. Unfortunately,
someone has modified .bashrc to log you out when you log in
with SSH

solution 1: medium.com/@theGirlWhoEncrypts/overthewire-bandit-level-18-level-19-a446576eaa75
ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme
output IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
Password: IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x

solution 2 Create “Pseudo Terminal”, with -t option in our ssh 
command
1. ssh bandit18@bandit.labs.overthewire.org -p 2220 -t /bin/sh 
2. enter bandit18's password to login.  (hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg)
3. run cat readme
output:
awhqfNnAbc1naukrpqDYcF95h7HoMTrC


Bandit Level 19    *************
 
https://overthewire.org/wargames/bandit/bandit20.html
ssh bandit19@bandit.labs.overthewire.org -p 2220
pass:  awhqfNnAbc1naukrpqDYcF95h7HoMTrC
https://medium.com/@theGirlWhoEncrypts/overthewire-bandit-level-19-level-20-d6b15b5d803
problem: To gain access to the next level, you should use the 
setuid binary in the homedirectory.

The password is in (/etc/bandit_pass), after you have used the 
setuid binary.

solution
Write up
1. ls -l
output: ...
-rwsr-x--- 1 bandit20 bandit19 7296 May 7 2020 bandit20-do
...

a. you can see the 's' in the permissions for the user instead of 'x'
b. Additionally, the owner of the file 'bandit20-do' is bandit20.
The red highlight signifies that this file has elevated permissions.
Hence, any commands executing with   ./bandit20-do 
will run as user bandit20 instead of bandit19.
c. (Optional) Since the file bandit20-do is an executable,
simply execute ./bandit20-do. The output the is following:

"
Run a command as another user.
Example: ./bandit20-do id
"


2. Thus, run
./bandit20-do cat /etc/bandit_pass/bandit20

output: GbKksEFF4yrVs6il55v6gwY5aVje5f0j


Bandit Level 20 → Level 21

https://overthewire.org/wargames/bandit/bandit21.html
ssh bandit20@bandit.labs.overthewire.org -p 2220
pass: GbKksEFF4yrVs6il55v6gwY5aVje5f0j
problem: There is a setuid binary in the homedirectory
that does the following:
it makes a connection to localhost on the port you specify as
a command line argument.
It then reads a line of text from the connection and compares it
to the password in the previous level (bandit20).
If the password is correct, it will transmit the password for the
next level (bandit21).

write up:
1. Run ls -l in the current working directory,
to identify the file with a “setuid” file permission setting
output:
-rwsr-x--- 1 bandit21 bandit20 12088 May 7 2020 suconnect

As mentioned in the previous level, in the image above, the file
'suconnect', has an s bit located in the “User” permission classes.
Hence, this is the file we are finding with the setuid binary
permission set.
Additionally, the owner of the file 'suconnect' is bandit21.
The red highlight signifies that this file has elevated permissions.
Hence, any commands executing with ./suconnect will run as
user bandit21 instead of bandit20.

2. Run ./suconnect
output:
This program will connect to the given port on localhost using TCP.
If it receives the correct password from the other side, the next password is transmitted back.

3. Open 2'nd terminal and connect with ssh

a. In 1st Terminal sand passward with netcat listener on 6000 port
    echo "GbKksEFF4yrVs6il55v6gwY5aVje5f0j" | nc -lp 6000

b. 2nd Terminal will connect to it using ./suconnect
    ./suconnect 6000

3. In term 1 output is gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr




Bandit Level 21 → Level  22

https://overthewire.org/wargames/bandit/bandit21.html
ssh bandit21@bandit.labs.overthewire.org -p 2220
pass: gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
problem: A program is running automatically at regular intervals
from cron, the time–based job scheduler.
Look in /etc/cron.d/ for the configuration and see
what command is being executed.

Write up:

1. cd /etc/cron.d
2. ls -la
output:
. . .
-rw-r--r-- 1 root root 120 May 7 2020 cronjob_bandit22
. . .
3. cat cronjob_bandit22
output:
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
  a. @reboot   means: Run once after reboot.
  b.  * * * * * means Run at every minute. 
        Execute the shell executable file, cronjob_bandit22.sh, 
          located in the directory /usr/bin/.

4. run cat /usr/bin/cronjob_bandit22.sh
   output:
         #!/bin/bash
         chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
         cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

5. cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
    output:
     Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI


/dev/null is a special file. Whatever you write to /dev/null
will be discarded.
It’s known as the null device in a UNIX system

 


