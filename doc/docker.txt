https://hub.docker.com/search?type=image # Image list

docker ps -a# List of processes
docker run busybox echo hello world# Run and exit "hello world"
docker  container  run busybox   #load unix  command line
docker  container  run busybox ls # run ls in the command line
docker images # List of images
docker run -it ubuntu bash # run bash in ubuntu ('exit' to exit)
docker kill   384bb827a649  

docker search clock

1. List, Create, and Start Containers
https://www.youtube.com/watch?v=kCjsgOfNRc0&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=4

 docker container ls    # Shows  runing containers
 docker container ls -a # Shows  containers  ever created
 docker container create hello-world # Create container from the
     image 'hello-world. The return value is the'id' of the container

 docker container start -a 'xxxxx' # start the container with ID ='xxxxx'
 docker container system prune --all #


2.  Logs, Stop, and Kill Containers
 https://www.youtube.com/watch?v=lQDVVd3Mq_A&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=5
 
 docker container create busybox  ls
 
 a. container start   'xxxxx' # No 'a' flag
 b. docker container logs 'xxxxx'# Output
 
 Start and stop a 'ping' process
 -------------------------------------
 a.docker container create busybox  ping  google.com # Create ping
     and return the 'id' of the container
 b. docker container start 	 'id' # Start the Ping and it will run
       in the background
 c. docker container ls -a #verify the above command is running
 d. docker container stop 'id'# The id is taking from the table
                    #It will take 10 seconds to repond
					
 
 docker container kill  'id' # Kill  process imidatly
 
6. Remove and Inspect Containers
   https://www.youtube.com/watch?v=iYwRamunM6k&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=6
   
   docker container rm     'id' # Remove  container with 'id'
   docker container rm  -f 'id' # Force Remove  container with 'id'
   
   docker container inspect 'id' #Returns a JASON list of information
   
   docker system prune --all # Delete all  containers
  
7.  Run a Command in a Running Container with exec 
  https://www.youtube.com/watch?v=QITUevjFtj0&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=7 
    
  a. docker container run  redis #	 Start redis container
  b. Open another  terminal and run the next command: 
       docker container ls -a
	   the output is:
       CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS      NAMES
       e4ae7210e31c   redis     "docker-entrypoint.sâ€¦"   9 minutes ago   Up 9 minutes   6379/tcp   ecstatic_moore
	   
  c. In the other terminal run:
       docker container exec -it 'id' redis-cli# run a command('redis-cli') inside an active container
	   and run : 'help'# List of help information 
	   exit #exit the 
	   
	   The -it flag enable to interact with the container
	-----------------------------------------------   

  a. terminal 1:
     docker container run  redis
     docker container ls -a	 

	 terminal 2:
     docker container exec -it 'id' sh
	 run: cd/ ls
	 exit
	 --------------------
	
	docker container  run -it busybox sh # Interact with sh 
	                                     #  command line


8.  Creating Custom Images	
    https://www.youtube.com/watch?v=QFKcgN1BApA&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=8
    alpine = basic version  of linux

    1. docker container run -it  --name itom  alpine:latest /bin/sh
	  #download alpine from docker hub make  changes and run it
	2.  apk add --update redis #  Install  redis on alpine image
	3. exit
	4. docker container ls -a 
	   output:
        CONTAINER ID   IMAGE           COMMAND   CREATED      STATUS           NAMES
        36a687169608   alpine:latest   "/bin/sh"  15 min ago  Exited (0) 2 min   itom
    5. docker container commit itom   itom-image
	    # Create a new image 'itom-image' from 'itom'
	6. docker image ls	
	   output:
	    REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
        itom-image   latest    03ce436ccc17   4 minutes ago   10.3MB
        alpine       latest    c059bfaa849c   2 months ago    5.
		
	7. 	docker container run itom-image redis-server 
	 #run the radis-server from the new image
	8. From a  new  cmd run:
        docker  container ls  -a
		output:
		 CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                        PORTS     NAMES
         773bd70138e8   itom-image      "redis-server"           2 minutes ago    Up 2 minutes                            priceless_gates
         6e5d1111fd85   itom-image      "radis-server"           3 minutes ago    Created                                 funny_keller
    9. docker  container exec -it priceless_gates  redis-cli 
       output:
        127.0.0.1:6379>	   
		
9.  Create an Image from a Dockerfile
https://www.youtube.com/watch?v=ydHdgf6KfPA&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=9		
 
  1.Create file 'Dockerfile'
   FROM alpine:latest
   RUN apk add --update redis
   CMD ["redis-server"]
   
 2. from the directory of the "Dockerfile"
    run: 
	   docker build -t   itom-redis:latest  .
 
 3.    docker image  ls	
    output:   
	  REPOSITORY     TAG       IMAGE ID       CREATED          SIZE
      itom-redis    latest    5c0c6f7a9693   10 minutes ago   10.3MB
      itom-image    latest    03ce436ccc17   4 hours ago      10.3MB
      busybox       latest    ec3f0931a6e6   12 days ago      1.24MB
      redis         latest    f1b6973564e9   3 weeks ago      113MB
      alpine        latest    c059bfaa849c   2 months ago     5.59MB
	  
 4. docker container run itom-projects/itom-redis 

10. COPY and ADD :copy local file to the contaner
 https://www.youtube.com/watch?v=mZQzzrWZSTU&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=10
 
 1.Create file 'Dockerfile'
   FROM alpine:latest
   COPY   ./P5     /app/p5-html 
   COPY   mbb.txt  /app/mbb.txt
   ADD    P5.tar   /app
 2. docker build .  
    docker image ls
	output:
	REPOSITORY                 TAG       IMAGE ID       CREATED          SIZE
	<none>                     <none>    87259d301e66   8 seconds ago    5.59MB
	itom-projects/itom-redis   latest    5c0c6f7a9693   48 minutes ago   10.3MB
	itom-image                 latest    03ce436ccc17   4 hours ago      10.3MB
	busybox                    latest    ec3f0931a6e6   12 days ago      1.24MB
	redis                      latest    f1b6973564e9   3 weeks ago      113MB
    alpine                     latest    c059bfaa849c   2 months ago     5.59MB
3. docker run -it 87259d301e66 sh
   ls -la
   cd app
   ls -la 
   # The files we copyed are in the app  folder
   
11  Creating a Realistic Project   
https://www.youtube.com/watch?v=BG3f0E_4HiE&list=PL6gx4Cwl9DGBkvpSIgwchk0glHLz7CQ-7&index=11
	1. 
	  a:Create the next 'index.js' file (This a simple express 
	       
        const express = require('express');
        const app = express();
        app.get('/',(req,res) =>  {
		     res.send('Hey now brown cow');
		 });
        app.listen(8080, () =>{
		    console.log('Lisening on port  8080')
		 });                                   application))
	     
		 
		b:Create the next 'package.json'  file 
		{
          "dependencies":{
		        "express": "*"
	     },
          "scripts":{
			 "start": "node index.js"
			 }
        }
		
		c: Create the next Docker file
		   FROM alpine 
           RUN npm install 
           CMD ["npm","start"]
	
    2. docker build .	
	 output:
	   Error  "npm not found"
	3. Change  Docker file to
	       FROM node:alpine
           WORKDIR /usr/app
		   COPY ./  ./
		   RUN npm install 
           CMD ["npm","start"]
	4. run:   docker build -t my/web:latest .	
    5. run:   docker image ls
      Output:
	  REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
      my/web     latest    d122f243b99a    minute ago    175MB
    6. run:
	    docker run -p 8080:8080 my/web
		output:
		     
             > start
             > node index.js

           Lisening on port  8080
	7. In firefome connect to http://127.0.0.1:8080/
       ouput: Hey now brown cow	
	   
	   
	   
 